{"ast":null,"code":"function _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) {\n    return typeof obj;\n  } : function (obj) {\n    return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n  }, _typeof(obj);\n}\nvar _excluded = [\"name\", \"disabled\", \"readOnly\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"containerComponentProps\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"];\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart.js';\nimport InputBasic from './InputBasic.js';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js';\nimport Flag from './Flag.js';\nimport InternationalIcon from './InternationalIcon.js';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries.js';\nimport { createCountryIconComponent } from './CountryIcon.js';\nimport { setRefsValue } from './useExternalRef.js';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes.js';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers.js';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js';\nvar PhoneNumberInput_ = /*#__PURE__*/function (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n  var _super = _createSuper(PhoneNumberInput_);\n  function PhoneNumberInput_(props) {\n    var _this;\n    _classCallCheck(this, PhoneNumberInput_);\n    _this = _super.call(this, props);\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      setRefsValue([_this.props.inputRef, _this.inputRef], instance);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n        international = _this$props.international,\n        metadata = _this$props.metadata,\n        onChange = _this$props.onChange,\n        focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n        prevPhoneDigits = _this$state.phoneDigits,\n        prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n        defaultCountry = _this$props2.defaultCountry,\n        onChange = _this$props2.onChange,\n        addInternationalOption = _this$props2.addInternationalOption,\n        international = _this$props2.international,\n        limitMaxLength = _this$props2.limitMaxLength,\n        countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n        metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n        countries = _this$state2.countries,\n        prevPhoneDigits = _this$state2.phoneDigits,\n        currentlySelectedCountry = _this$state2.country;\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n          prevPhoneDigits: prevPhoneDigits,\n          country: currentlySelectedCountry,\n          countryRequired: !addInternationalOption,\n          defaultCountry: defaultCountry,\n          getAnyCountry: function getAnyCountry() {\n            return _this.getFirstSupportedCountry({\n              countries: countries\n            });\n          },\n          countries: countries,\n          international: international,\n          limitMaxLength: limitMaxLength,\n          countryCallingCodeEditable: countryCallingCodeEditable,\n          metadata: metadata\n        }),\n        phoneDigits = _onPhoneDigitsChange.phoneDigits,\n        country = _onPhoneDigitsChange.country,\n        value = _onPhoneDigitsChange.value;\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n      _this.setState(stateUpdate,\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n      var onFocus = _this.props.onFocus;\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      _this._onBlur();\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n    _this.inputRef = /*#__PURE__*/React.createRef();\n    var _this$props3 = _this.props,\n      _value = _this$props3.value,\n      labels = _this$props3.labels,\n      _international = _this$props3.international,\n      _addInternationalOption = _this$props3.addInternationalOption,\n      displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n      initialValueFormat = _this$props3.initialValueFormat,\n      _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n      _defaultCountry = _this$props4.defaultCountry,\n      _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    } // This function mimicks `refSetter` function returned from `useExternalRef()` hook\n    // because this class-like React component can't use the `useExternalRef()` hook.\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n        international = _this$props5.international,\n        countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n        countryOptionsOrder = _this$props5.countryOptionsOrder,\n        addInternationalOption = _this$props5.addInternationalOption,\n        labels = _this$props5.labels,\n        locales = _this$props5.locales,\n        metadata = _this$props5.metadata;\n      return this.useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"useMemoCountrySelectOptions\",\n    value: function useMemoCountrySelectOptions(generator, dependencies) {\n      if (!this.countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)) {\n        this.countrySelectOptionsMemo = generator();\n        this.countrySelectOptionsMemoDependencies = dependencies;\n      }\n      return this.countrySelectOptionsMemo;\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        name = _this$props6.name,\n        disabled = _this$props6.disabled,\n        readOnly = _this$props6.readOnly,\n        autoComplete = _this$props6.autoComplete,\n        style = _this$props6.style,\n        className = _this$props6.className,\n        inputRef = _this$props6.inputRef,\n        inputComponent = _this$props6.inputComponent,\n        numberInputProps = _this$props6.numberInputProps,\n        smartCaret = _this$props6.smartCaret,\n        CountrySelectComponent = _this$props6.countrySelectComponent,\n        countrySelectProps = _this$props6.countrySelectProps,\n        ContainerComponent = _this$props6.containerComponent,\n        containerComponentProps = _this$props6.containerComponentProps,\n        defaultCountry = _this$props6.defaultCountry,\n        countriesProperty = _this$props6.countries,\n        countryOptionsOrder = _this$props6.countryOptionsOrder,\n        labels = _this$props6.labels,\n        flags = _this$props6.flags,\n        flagComponent = _this$props6.flagComponent,\n        flagUrl = _this$props6.flagUrl,\n        addInternationalOption = _this$props6.addInternationalOption,\n        internationalIcon = _this$props6.internationalIcon,\n        displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props6.initialValueFormat,\n        onCountryChange = _this$props6.onCountryChange,\n        limitMaxLength = _this$props6.limitMaxLength,\n        countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n        focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n        reset = _this$props6.reset,\n        metadata = _this$props6.metadata,\n        international = _this$props6.international,\n        locales = _this$props6.locales,\n        rest = _objectWithoutProperties(_this$props6, _excluded);\n      var _this$state3 = this.state,\n        country = _this$state3.country,\n        countries = _this$state3.countries,\n        phoneDigits = _this$state3.phoneDigits,\n        isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return /*#__PURE__*/React.createElement(ContainerComponent, _extends({\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused,\n          'PhoneInput--disabled': disabled,\n          'PhoneInput--readOnly': readOnly\n        })\n      }, containerComponentProps), /*#__PURE__*/React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        readOnly: readOnly || countrySelectProps && countrySelectProps.readOnly,\n        iconComponent: this.CountryIcon\n      })), /*#__PURE__*/React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        international: international ? true : undefined,\n        withCountryCallingCode: international ? true : undefined,\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        readOnly: readOnly,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value:\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\nvar PhoneNumberInput = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(PhoneNumberInput_, _extends({}, withDefaultProps(props), {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\r\n   * Phone number in `E.164` format.\r\n   *\r\n   * Example:\r\n   *\r\n   * `\"+12223333333\"`\r\n   *\r\n   * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n   */\n  value: PropTypes.string,\n  /**\r\n   * A function of `value: string?`.\r\n   *\r\n   * Updates the `value` property as the user inputs a phone number.\r\n   *\r\n   * If the user erases the input value, the argument is `undefined`.\r\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\r\n   * Toggles the `--focus` CSS class.\r\n   * @ignore\r\n   */\n  onFocus: PropTypes.func,\n  /**\r\n   * `onBlur` is usually passed by `redux-form`.\r\n   * @ignore\r\n   */\n  onBlur: PropTypes.func,\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `disabled`.\r\n   */\n  disabled: PropTypes.bool,\n  /**\r\n   * Set to `true` to mark both the phone number `<input/>`\r\n   * and the country `<select/>` as `readonly`.\r\n   */\n  readOnly: PropTypes.bool,\n  /**\r\n   * Sets `autoComplete` property for phone number `<input/>`.\r\n   *\r\n   * Web browser's \"autocomplete\" feature\r\n   * remembers the phone number being input\r\n   * and can also autofill the `<input/>`\r\n   * with previously remembered phone numbers.\r\n   *\r\n   * https://developers.google.com\r\n   * /web/updates/2015/06/checkout-faster-with-autofill\r\n   *\r\n   * For example, can be used to turn it off:\r\n   *\r\n   * \"So when should you use `autocomplete=\"off\"`?\r\n   *  One example is when you've implemented your own version\r\n   *  of autocomplete for search. Another example is any form field\r\n   *  where users will input and submit different kinds of information\r\n   *  where it would not be useful to have the browser remember\r\n   *  what was submitted previously\".\r\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string,\n  /**\r\n   * Set to `\"national\"` to show the initial `value` in\r\n   * \"national\" format rather than \"international\".\r\n   *\r\n   * For example, if `initialValueFormat` is `\"national\"`\r\n   * and the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n   *\r\n   * By default, `initialValueFormat` is `undefined`,\r\n   * meaning that if the initial `value=\"+12133734253\"` is passed\r\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n   *\r\n   * The reason for such default behaviour is that\r\n   * the newer generation grows up when there are no stationary phones\r\n   * and therefore everyone inputs phone numbers in international format\r\n   * in their smartphones so people gradually get more accustomed to\r\n   * writing phone numbers in international format rather than in local format.\r\n   * Future people won't be using \"national\" format, only \"international\".\r\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n  /**\r\n   * The country to be selected by default.\r\n   * For example, can be set after a GeoIP lookup.\r\n   *\r\n   * Example: `\"US\"`.\r\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n  /**\r\n   * If specified, only these countries will be available for selection.\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"RU\", \"UA\", \"KZ\"]`\r\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n  /**\r\n   * Custom country `<select/>` option names.\r\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n   *\r\n   * See the `locales` directory for examples.\r\n   */\n  labels: labelsPropType,\n  /**\r\n   * Country `<select/>` options are sorted by their labels.\r\n   * The default sorting function uses `a.localeCompare(b, locales)`,\r\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n   * Some languages, like Chinese, support multiple sorting variants\r\n   * (called \"collations\"), and the user might prefer one or another.\r\n   * Also, sometimes the Operating System language is not always\r\n   * the preferred language for a person using a website or an application,\r\n   * so there should be a way to specify custom locale.\r\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  /*\r\n   * Custom country `<select/>` options sorting function.\r\n   * The default one uses `a.localeCompare(b)`, and,\r\n   * if that's not available, falls back to simple `a > b`/`a < b`.\r\n   * There have been requests to add custom sorter for cases\r\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n  compareStrings: PropTypes.func,\r\n   */\n\n  /**\r\n   * A URL template of a country flag, where\r\n   * \"{XX}\" is a two-letter country code in upper case,\r\n   * or where \"{xx}\" is a two-letter country code in lower case.\r\n   * By default it points to `country-flag-icons` gitlab pages website.\r\n   * I imagine someone might want to download those country flag icons\r\n   * and host them on their own servers instead\r\n   * (all flags are available in the `country-flag-icons` library).\r\n   * There's a catch though: new countries may be added in future,\r\n   * so when hosting country flag icons on your own server\r\n   * one should check the `CHANGELOG.md` every time before updating this library,\r\n   * otherwise there's a possibility that some new country flag would be missing.\r\n   */\n  flagUrl: PropTypes.string,\n  /**\r\n   * Custom country flag icon components.\r\n   * These flags will be used instead of the default ones.\r\n   * The the \"Flags\" section of the readme for more info.\r\n   *\r\n   * The shape is an object where keys are country codes\r\n   * and values are flag icon components.\r\n   * Flag icon components receive the same properties\r\n   * as `flagComponent` (see below).\r\n   *\r\n   * Example:\r\n   *\r\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n   *\r\n   * Example:\r\n   *\r\n   * `import flags from 'country-flag-icons/react/3x2'`\r\n   *\r\n   * `import PhoneInput from 'react-phone-number-input'`\r\n   *\r\n   * `<PhoneInput flags={flags} .../>`\r\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  /**\r\n   * Country flag icon component.\r\n   *\r\n   * Takes properties:\r\n   *\r\n   * * `country: string` — The country code.\r\n   * * `countryName: string` — The country name.\r\n   * * `flagUrl: string` — The `flagUrl` property (see above).\r\n   * * `flags: object` — The `flags` property (see above).\r\n   */\n  flagComponent: PropTypes.elementType,\n  /**\r\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n   */\n  addInternationalOption: PropTypes.bool,\n  /**\r\n   * \"International\" icon component.\r\n   * Should have the same aspect ratio.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `title: string` — \"International\" country option label.\r\n   */\n  internationalIcon: PropTypes.elementType,\n  /**\r\n   * Can be used to place some countries on top of the list of country `<select/>` options.\r\n   *\r\n   * * `\"XX\"` — inserts an option for \"XX\" country.\r\n   * * `\"🌐\"` — inserts \"International\" option.\r\n   * * `\"|\"` — inserts a separator.\r\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n   *\r\n   * Example:\r\n   *\r\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n  /**\r\n   * `<Phone/>` component CSS style object.\r\n   */\n  style: PropTypes.object,\n  /**\r\n   * `<Phone/>` component CSS class.\r\n   */\n  className: PropTypes.string,\n  /**\r\n   * Country `<select/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `name: string?` — HTML `name` attribute.\r\n   * * `value: string?` — The currently selected country code.\r\n   * * `onChange(value: string?)` — Updates the `value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n   * * `disabled: boolean?` — HTML `disabled` attribute.\r\n   * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n   * * `className: string` — CSS class name.\r\n   */\n  countrySelectComponent: PropTypes.elementType,\n  /**\r\n   * Country `<select/>` component props.\r\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n   */\n  countrySelectProps: PropTypes.object,\n  /**\r\n   * Phone number `<input/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `value: string` — The formatted `value`.\r\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n   *\r\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n   */\n  inputComponent: PropTypes.elementType,\n  /**\r\n   * Phone number `<input/>` component props.\r\n   */\n  numberInputProps: PropTypes.object,\n  /**\r\n   * Wrapping `<div/>` component.\r\n   *\r\n   * Receives properties:\r\n   *\r\n   * * `style: object` — A component CSS style object.\r\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n   */\n  containerComponent: PropTypes.elementType,\n  /**\r\n   * Wrapping `<div/>` component props.\r\n   */\n  containerComponentProps: PropTypes.object,\n  /**\r\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n   * the caret position is moved right before the next available digit skipping\r\n   * any punctuation in between. This is called \"smart\" caret positioning.\r\n   * Another case would be the phone number format changing as a result of\r\n   * the user inserting the digit somewhere in the middle, which would require\r\n   * re-positioning the caret because all digit positions have changed.\r\n   * This \"smart\" caret positioning feature can be turned off by passing\r\n   * `smartCaret={false}` property: use it in case of any possible issues\r\n   * with caret position during phone number input.\r\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool,\n  /**\r\n   * Set to `true` to force \"international\" phone number format.\r\n   * Set to `false` to force \"national\" phone number format.\r\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n   */\n  international: PropTypes.bool,\n  /**\r\n   * If set to `true`, the phone number input will get trimmed\r\n   * if it exceeds the maximum length for the country.\r\n   */\n  limitMaxLength: PropTypes.bool,\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: PropTypes.bool,\n  /**\r\n   * `libphonenumber-js` metadata.\r\n   *\r\n   * Can be used to pass custom `libphonenumber-js` metadata\r\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n   */\n  metadata: metadataPropType,\n  /**\r\n   * Is called every time the selected country changes:\r\n   * either programmatically or when user selects it manually from the list.\r\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: PropTypes.bool\n};\nvar defaultProps = {\n  /**\r\n   * Remember (and autofill) the value as a phone number.\r\n   */\n  autoComplete: 'tel',\n  /**\r\n   * Country `<select/>` component.\r\n   */\n  countrySelectComponent: CountrySelect,\n  /**\r\n   * Flag icon component.\r\n   */\n  flagComponent: Flag,\n  /**\r\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  /**\r\n   * Default \"International\" country `<select/>` option icon.\r\n   */\n  internationalIcon: InternationalIcon,\n  /**\r\n   * Phone number `<input/>` component.\r\n   */\n  inputComponent: 'input',\n  /**\r\n   * Wrapping `<div/>` component.\r\n   */\n  containerComponent: 'div',\n  /**\r\n   * Some users requested a way to reset the component:\r\n   * both number `<input/>` and country `<select/>`.\r\n   * Whenever `reset` property changes both number `<input/>`\r\n   * and country `<select/>` are reset.\r\n   * It's not implemented as some instance `.reset()` method\r\n   * because `ref` is forwarded to `<input/>`.\r\n   * It's also not replaced with just resetting `country` on\r\n   * external `value` reset, because a user could select a country\r\n   * and then not input any `value`, and so the selected country\r\n   * would be \"stuck\", if not using this `reset` property.\r\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n  /**\r\n   *\r\n   */\n\n  /**\r\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n   */\n  smartCaret: true,\n  /**\r\n   * Whether to add the \"International\" option\r\n   * to the list of countries.\r\n   */\n  addInternationalOption: true,\n  /**\r\n   * If set to `false`, and `international` is `true`, then\r\n   * users won't be able to erase the \"country calling part\"\r\n   * of a phone number in the `<input/>`.\r\n   */\n  countryCallingCodeEditable: true,\n  /**\r\n   * If set to `false`, will not focus the `<input/>` component\r\n   * when the user selects a country from the list of countries.\r\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n   * Quote:\r\n   * \"On input: Changing the setting of any user interface component\r\n   *  does not automatically cause a change of context unless the user\r\n   *  has been advised of the behaviour before using the component.\"\r\n   */\n  focusInputOnCountrySelection: true\n};\nfunction withDefaultProps(props) {\n  props = _objectSpread({}, props);\n  for (var key in defaultProps) {\n    if (props[key] === undefined) {\n      props[key] = defaultProps[key];\n    }\n  }\n  return props;\n}\nexport default PhoneNumberInput;\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var i = 0;\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}","map":{"version":3,"names":["React","PropTypes","classNames","InputSmart","InputBasic","CountrySelectWithIcon","CountrySelect","Flag","InternationalIcon","sortCountryOptions","isCountrySupportedWithError","getSupportedCountries","getSupportedCountryOptions","getCountries","createCountryIconComponent","setRefsValue","metadata","metadataPropType","labels","labelsPropType","getPreSelectedCountry","getCountrySelectOptions","_getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPhoneInputWithCountryStateUpdateFromNewProps","PhoneNumberInput_","props","_this","_classCallCheck","_super","call","_defineProperty","_assertThisInitialized","instance","inputRef","country","newCountry","_this$props","international","onChange","focusInputOnCountrySelection","_this$state","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","useNationalFormat","newValue","current","focus","setState","hasUserSelectedACountry","value","_phoneDigits","_this$props2","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","countries","currentlySelectedCountry","_onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","createRef","_this$props3","_value","_international","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_metadata","_this$props4","_defaultCountry","_countries","undefined","phoneNumber","CountryIcon","preSelectedCountry","required","componentDidMount","onCountryChange","selectedCountry","componentDidUpdate","prevProps","prevState","_ref","_this$props5","countryOptionsOrder","locales","useMemoCountrySelectOptions","countryNames","compareStringsLocales","generator","dependencies","countrySelectOptionsMemoDependencies","areEqualArrays","countrySelectOptionsMemo","_ref2","countryOptions","render","_this$props6","name","disabled","readOnly","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","containerComponentProps","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","_objectWithoutProperties","_excluded","_this$state3","InputComponent","countrySelectOptions","createElement","_extends","concat","options","onCountryFocus","onCountryBlur","iconComponent","ref","setInputRef","type","withCountryCallingCode","getDerivedStateFromProps","_objectSpread","PureComponent","PhoneNumberInput","forwardRef","withDefaultProps","propTypes","string","func","isRequired","bool","oneOf","arrayOf","oneOfType","objectOf","elementType","object","defaultProps","any","key","a","b","length","i"],"sources":["/mnt/Disque_local1/Projet IHM/frontend/node_modules/react-phone-number-input/source/PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport classNames from 'classnames'\r\n\r\nimport InputSmart from './InputSmart.js'\r\nimport InputBasic from './InputBasic.js'\r\n\r\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect.js'\r\n\r\nimport Flag from './Flag.js'\r\nimport InternationalIcon from './InternationalIcon.js'\r\n\r\nimport {\r\n\tsortCountryOptions,\r\n\tisCountrySupportedWithError,\r\n\tgetSupportedCountries,\r\n\tgetSupportedCountryOptions,\r\n\tgetCountries\r\n} from './helpers/countries.js'\r\n\r\nimport { createCountryIconComponent } from './CountryIcon.js'\r\n\r\nimport { setRefsValue } from './useExternalRef.js'\r\n\r\nimport {\r\n\tmetadata as metadataPropType,\r\n\tlabels as labelsPropType\r\n} from './PropTypes.js'\r\n\r\nimport {\r\n\tgetPreSelectedCountry,\r\n\tgetCountrySelectOptions,\r\n\tparsePhoneNumber,\r\n\tgenerateNationalNumberDigits,\r\n\tgetPhoneDigitsForNewCountry,\r\n\tgetInitialPhoneDigits,\r\n\tonPhoneDigitsChange,\r\n\te164\r\n} from './helpers/phoneInputHelpers.js'\r\n\r\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps.js'\r\n\r\nclass PhoneNumberInput_ extends React.PureComponent {\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\r\n\t\tthis.inputRef = React.createRef()\r\n\r\n\t\tconst {\r\n\t\t\tvalue,\r\n\t\t\tlabels,\r\n\t\t\tinternational,\r\n\t\t\taddInternationalOption,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tlet {\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries\r\n\t\t} = this.props\r\n\r\n\t\t// Validate `defaultCountry`.\r\n\t\tif (defaultCountry) {\r\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\tdefaultCountry = undefined\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Validate `countries`.\r\n\t\tcountries = getSupportedCountries(countries, metadata)\r\n\r\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\r\n\r\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\r\n\r\n\t\tconst preSelectedCountry = getPreSelectedCountry({\r\n\t\t\tvalue,\r\n\t\t\tphoneNumber,\r\n\t\t\tdefaultCountry,\r\n\t\t\trequired: !addInternationalOption,\r\n\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tthis.state = {\r\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\r\n\t\t\tprops: this.props,\r\n\r\n\t\t\t// The country selected.\r\n\t\t\tcountry: preSelectedCountry,\r\n\r\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\r\n\t\t\t// For example, a developer might theoretically pass some unsupported\r\n\t\t\t// countries as part of the `countries` property, and because of that\r\n\t\t\t// the component uses `this.state.countries` (which are filtered)\r\n\t\t\t// instead of `this.props.countries`\r\n\t\t\t// (which could potentially contain unsupported countries).\r\n\t\t\tcountries,\r\n\r\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\r\n\t\t\t// The reason is that there's no way of finding out\r\n\t\t\t// in which form should `value` be displayed: international or national.\r\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\r\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\r\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\r\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\r\n\t\t\t// and if a user entered `+7 800 555 35 35`\r\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\r\n\t\t\tphoneDigits: getInitialPhoneDigits({\r\n\t\t\t\tvalue,\r\n\t\t\t\tphoneNumber,\r\n\t\t\t\tdefaultCountry,\r\n\t\t\t\tinternational,\r\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\r\n\t\t\t\tmetadata\r\n\t\t\t}),\r\n\r\n\t\t\t// `value` property is duplicated in state.\r\n\t\t\t// The reason is that `getDerivedStateFromProps()`\r\n\t\t\t// needs this `value` to compare to the new `value` property\r\n\t\t\t// to find out if `phoneDigits` needs updating:\r\n\t\t\t// If the `value` property was changed externally\r\n\t\t\t// then it won't be equal to `state.value`\r\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\r\n\t\t\tvalue\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tlet { defaultCountry } = this.props\r\n\t\tconst { country: selectedCountry } = this.state\r\n\t\tif (onCountryChange) {\r\n\t\t\tif (defaultCountry) {\r\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\r\n\t\t\t\t\tdefaultCountry = undefined\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (selectedCountry !== defaultCountry) {\r\n\t\t\t\tonCountryChange(selectedCountry)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidUpdate(prevProps, prevState) {\r\n\t\tconst { onCountryChange } = this.props\r\n\t\tconst { country } = this.state\r\n\t\t// Call `onCountryChange` when user selects another country.\r\n\t\tif (onCountryChange && country !== prevState.country) {\r\n\t\t\tonCountryChange(country)\r\n\t\t}\r\n\t}\r\n\r\n\t// This function mimicks `refSetter` function returned from `useExternalRef()` hook\r\n\t// because this class-like React component can't use the `useExternalRef()` hook.\r\n\tsetInputRef = (instance) => {\r\n\t\tsetRefsValue([this.props.inputRef, this.inputRef], instance)\r\n\t}\r\n\r\n\tgetCountrySelectOptions({ countries }) {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tlocales,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\t\treturn this.useMemoCountrySelectOptions(() => {\r\n\t\t\treturn sortCountryOptions(\r\n\t\t\t\tgetCountrySelectOptions({\r\n\t\t\t\t\tcountries: countries || getCountries(metadata),\r\n\t\t\t\t\tcountryNames: labels,\r\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\r\n\t\t\t\t\tcompareStringsLocales: locales,\r\n\t\t\t\t\t// compareStrings\r\n\t\t\t\t}),\r\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\r\n\t\t\t)\r\n\t\t}, [\r\n\t\t\tcountries,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\taddInternationalOption,\r\n\t\t\tlabels,\r\n\t\t\tmetadata\r\n\t\t])\r\n\t}\r\n\r\n\tuseMemoCountrySelectOptions(generator, dependencies) {\r\n\t\tif (\r\n\t\t\t!this.countrySelectOptionsMemoDependencies ||\r\n\t\t\t!areEqualArrays(dependencies, this.countrySelectOptionsMemoDependencies)\r\n\t\t) {\r\n\t\t\tthis.countrySelectOptionsMemo = generator()\r\n\t\t\tthis.countrySelectOptionsMemoDependencies = dependencies\r\n\t\t}\r\n\t\treturn this.countrySelectOptionsMemo\r\n\t}\r\n\r\n\tgetFirstSupportedCountry({ countries }) {\r\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\r\n\t\treturn countryOptions[0].value\r\n\t}\r\n\r\n\t// A shorthand for not passing `metadata` as a second argument.\r\n\tisCountrySupportedWithError = (country) => {\r\n\t\tconst { metadata } = this.props\r\n\t\treturn isCountrySupportedWithError(country, metadata)\r\n\t}\r\n\r\n\t// Country `<select/>` `onChange` handler.\r\n\tonCountryChange = (newCountry) => {\r\n\t\tconst {\r\n\t\t\tinternational,\r\n\t\t\tmetadata,\r\n\t\t\tonChange,\r\n\t\t\tfocusInputOnCountrySelection\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: prevCountry\r\n\t\t} = this.state\r\n\r\n\t\t// After the new `country` has been selected,\r\n\t\t// if the phone number `<input/>` holds any digits\r\n\t\t// then migrate those digits for the new `country`.\r\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\r\n\t\t\tprevCountry,\r\n\t\t\tnewCountry,\r\n\t\t\tmetadata,\r\n\t\t\t// Convert the phone number to \"national\" format\r\n\t\t\t// when the user changes the selected country by hand.\r\n\t\t\tuseNationalFormat: !international\r\n\t\t})\r\n\r\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\r\n\r\n\t\t// Focus phone number `<input/>` upon country selection.\r\n\t\tif (focusInputOnCountrySelection) {\r\n\t\t\tthis.inputRef.current.focus()\r\n\t\t}\r\n\r\n\t\t// If the user has already manually selected a country\r\n\t\t// then don't override that already selected country\r\n\t\t// if the `defaultCountry` property changes.\r\n\t\t// That's what `hasUserSelectedACountry` flag is for.\r\n\r\n\t\tthis.setState({\r\n\t\t\tcountry: newCountry,\r\n\t\t\thasUserSelectedACountry: true,\r\n\t\t\tphoneDigits: newPhoneDigits,\r\n\t\t\tvalue: newValue\r\n\t\t},\r\n\t\t() => {\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\tonChange(newValue)\r\n\t\t})\r\n\t}\r\n\r\n\t/**\r\n\t * `<input/>` `onChange()` handler.\r\n\t * Updates `value` property accordingly (so that they are kept in sync).\r\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\r\n\t */\r\n\tonChange = (_phoneDigits) => {\r\n\t\tconst {\r\n\t\t\tdefaultCountry,\r\n\t\t\tonChange,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits: prevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry\r\n\t\t} = this.state\r\n\r\n\t\tconst {\r\n\t\t\t// `phoneDigits` returned here are a \"normalized\" version of the original `phoneDigits`.\r\n\t\t\t// The returned `phoneDigits` shouldn't be used anywhere except for passing it as\r\n\t\t\t// `prevPhoneDigits` parameter to the same `onPhoneDigitsChange()` function\r\n\t\t\t// on next input change event.\r\n\t\t\tphoneDigits,\r\n\t\t\tcountry,\r\n\t\t\tvalue\r\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\r\n\t\t\tprevPhoneDigits,\r\n\t\t\tcountry: currentlySelectedCountry,\r\n\t\t\tcountryRequired: !addInternationalOption,\r\n\t\t\tdefaultCountry,\r\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\r\n\t\t\tcountries,\r\n\t\t\tinternational,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tmetadata\r\n\t\t})\r\n\r\n\t\tconst stateUpdate = {\r\n\t\t\tphoneDigits,\r\n\t\t\tvalue,\r\n\t\t\tcountry\r\n\t\t}\r\n\r\n\t\tif (countryCallingCodeEditable === false) {\r\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\r\n\t\t\t// then it would have no effect when erasing an inital international prefix\r\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\r\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\r\n\t\t\t// so the component wouldn't rerender, and the user would be able\r\n\t\t\t// to erase the country calling code part, and that part is\r\n\t\t\t// assumed to be non-eraseable. That's why the component is\r\n\t\t\t// forcefully rerendered here.\r\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\r\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\r\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\r\n\t\t\t\tstateUpdate.forceRerender = {}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis.setState(\r\n\t\t\tstateUpdate,\r\n\t\t\t// Update the new `value` property.\r\n\t\t\t// Doing it after the `state` has been updated\r\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\r\n\t\t\t// with the new `value` which will be compared to `state.value` there.\r\n\t\t\t() => onChange(value)\r\n\t\t)\r\n\t}\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onFocus = () => this.setState({ isFocused: true })\r\n\r\n\t// Toggles the `--focus` CSS class.\r\n\t_onBlur = () => this.setState({ isFocused: false })\r\n\r\n\tonFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\tconst { onFocus } = this.props\r\n\t\tif (onFocus) {\r\n\t\t\tonFocus(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur = (event) => {\r\n\t\tconst { onBlur } = this.props\r\n\t\tthis._onBlur()\r\n\t\tif (onBlur) {\r\n\t\t\tonBlur(event)\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryFocus = (event) => {\r\n\t\tthis._onFocus()\r\n\t\t// this.setState({ countrySelectFocused: true })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onFocus } = countrySelectProps\r\n\t\t\tif (onFocus) {\r\n\t\t\t\tonFocus(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonCountryBlur = (event) => {\r\n\t\tthis._onBlur()\r\n\t\t// this.setState({ countrySelectFocused: false })\r\n\t\tconst { countrySelectProps } = this.props\r\n\t\tif (countrySelectProps) {\r\n\t\t\tconst { onBlur } = countrySelectProps\r\n\t\t\tif (onBlur) {\r\n\t\t\t\tonBlur(event)\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t// `state` holds previous props as `props`, and also:\r\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\r\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\r\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\r\n\t// (and a couple of other less significant properties)\r\n\tstatic getDerivedStateFromProps(props, state) {\r\n\t\treturn {\r\n\t\t\t// Emulate `prevProps` via `state.props`.\r\n\t\t\tprops,\r\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\r\n\t\t}\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst {\r\n\t\t\t// Generic HTML attributes.\r\n\t\t\tname,\r\n\t\t\tdisabled,\r\n\t\t\treadOnly,\r\n\t\t\tautoComplete,\r\n\t\t\tstyle,\r\n\t\t\tclassName,\r\n\r\n\t\t\t// Number `<input/>` properties.\r\n\t\t\tinputRef,\r\n\t\t\tinputComponent,\r\n\t\t\tnumberInputProps,\r\n\t\t\tsmartCaret,\r\n\r\n\t\t\t// Country `<select/>` properties.\r\n\t\t\tcountrySelectComponent: CountrySelectComponent,\r\n\t\t\tcountrySelectProps,\r\n\r\n\t\t\t// Container `<div/>` properties.\r\n\t\t\tcontainerComponent: ContainerComponent,\r\n\t\t\tcontainerComponentProps,\r\n\r\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\r\n\t\t\tdefaultCountry,\r\n\t\t\tcountries: countriesProperty,\r\n\t\t\tcountryOptionsOrder,\r\n\t\t\tlabels,\r\n\t\t\tflags,\r\n\t\t\tflagComponent,\r\n\t\t\tflagUrl,\r\n\t\t\taddInternationalOption,\r\n\t\t\tinternationalIcon,\r\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\r\n\t\t\t// superceded by `initialValueFormat` property.\r\n\t\t\tdisplayInitialValueAsLocalNumber,\r\n\t\t\tinitialValueFormat,\r\n\t\t\tonCountryChange,\r\n\t\t\tlimitMaxLength,\r\n\t\t\tcountryCallingCodeEditable,\r\n\t\t\tfocusInputOnCountrySelection,\r\n\t\t\treset,\r\n\t\t\tmetadata,\r\n\t\t\tinternational,\r\n\t\t\tlocales,\r\n\t\t\t// compareStrings,\r\n\t\t\t...rest\r\n\t\t} = this.props\r\n\r\n\t\tconst {\r\n\t\t\tcountry,\r\n\t\t\tcountries,\r\n\t\t\tphoneDigits,\r\n\t\t\tisFocused\r\n\t\t} = this.state\r\n\r\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\r\n\r\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\r\n\r\n\t\treturn (\r\n\t\t\t<ContainerComponent\r\n\t\t\t\tstyle={style}\r\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\r\n\t\t\t\t\t'PhoneInput--focus': isFocused,\r\n\t\t\t\t\t'PhoneInput--disabled': disabled,\r\n\t\t\t\t\t'PhoneInput--readOnly': readOnly\r\n\t\t\t\t})}\r\n\t\t\t\t{...containerComponentProps}>\r\n\r\n\t\t\t\t{/* Country `<select/>` */}\r\n\t\t\t\t<CountrySelectComponent\r\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\r\n\t\t\t\t\taria-label={labels.country}\r\n\t\t\t\t\t{...countrySelectProps}\r\n\t\t\t\t\tvalue={country}\r\n\t\t\t\t\toptions={countrySelectOptions}\r\n\t\t\t\t\tonChange={this.onCountryChange}\r\n\t\t\t\t\tonFocus={this.onCountryFocus}\r\n\t\t\t\t\tonBlur={this.onCountryBlur}\r\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\r\n\t\t\t\t\treadOnly={readOnly || (countrySelectProps && countrySelectProps.readOnly)}\r\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\r\n\r\n\t\t\t\t{/* Phone number `<input/>` */}\r\n\t\t\t\t<InputComponent\r\n\t\t\t\t\tref={this.setInputRef}\r\n\t\t\t\t\ttype=\"tel\"\r\n\t\t\t\t\tautoComplete={autoComplete}\r\n\t\t\t\t\t{...numberInputProps}\r\n\t\t\t\t\t{...rest}\r\n\t\t\t\t\tinternational={international ? true : undefined}\r\n\t\t\t\t\twithCountryCallingCode={international ? true : undefined}\r\n\t\t\t\t\tname={name}\r\n\t\t\t\t\tmetadata={metadata}\r\n\t\t\t\t\tcountry={country}\r\n\t\t\t\t\tvalue={phoneDigits || ''}\r\n\t\t\t\t\tonChange={this.onChange}\r\n\t\t\t\t\tonFocus={this.onFocus}\r\n\t\t\t\t\tonBlur={this.onBlur}\r\n\t\t\t\t\tdisabled={disabled}\r\n\t\t\t\t\treadOnly={readOnly}\r\n\t\t\t\t\tinputComponent={inputComponent}\r\n\t\t\t\t\tclassName={classNames(\r\n\t\t\t\t\t\t'PhoneInputInput',\r\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\r\n\t\t\t\t\t\trest.className\r\n\t\t\t\t\t)}/>\r\n\t\t\t</ContainerComponent>\r\n\t\t)\r\n\t}\r\n}\r\n\r\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\r\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\r\n\t<PhoneNumberInput_ {...withDefaultProps(props)} inputRef={ref}/>\r\n))\r\n\r\nPhoneNumberInput.propTypes = {\r\n\t/**\r\n\t * Phone number in `E.164` format.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `\"+12223333333\"`\r\n\t *\r\n\t * Any \"falsy\" value like `undefined`, `null` or an empty string `\"\"` is treated like \"empty\".\r\n\t */\r\n\tvalue: PropTypes.string,\r\n\r\n\t/**\r\n\t * A function of `value: string?`.\r\n\t *\r\n\t * Updates the `value` property as the user inputs a phone number.\r\n\t *\r\n\t * If the user erases the input value, the argument is `undefined`.\r\n\t */\r\n\tonChange: PropTypes.func.isRequired,\r\n\r\n\t/**\r\n\t * Toggles the `--focus` CSS class.\r\n\t * @ignore\r\n\t */\r\n\tonFocus: PropTypes.func,\r\n\r\n\t/**\r\n\t * `onBlur` is usually passed by `redux-form`.\r\n\t * @ignore\r\n\t */\r\n\tonBlur: PropTypes.func,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `disabled`.\r\n\t */\r\n\tdisabled: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to mark both the phone number `<input/>`\r\n\t * and the country `<select/>` as `readonly`.\r\n\t */\r\n\treadOnly: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Sets `autoComplete` property for phone number `<input/>`.\r\n\t *\r\n\t * Web browser's \"autocomplete\" feature\r\n\t * remembers the phone number being input\r\n\t * and can also autofill the `<input/>`\r\n\t * with previously remembered phone numbers.\r\n\t *\r\n\t * https://developers.google.com\r\n\t * /web/updates/2015/06/checkout-faster-with-autofill\r\n\t *\r\n\t * For example, can be used to turn it off:\r\n\t *\r\n\t * \"So when should you use `autocomplete=\"off\"`?\r\n\t *  One example is when you've implemented your own version\r\n\t *  of autocomplete for search. Another example is any form field\r\n\t *  where users will input and submit different kinds of information\r\n\t *  where it would not be useful to have the browser remember\r\n\t *  what was submitted previously\".\r\n\t */\r\n\t// (is `\"tel\"` by default)\r\n\tautoComplete: PropTypes.string,\r\n\r\n\t/**\r\n\t * Set to `\"national\"` to show the initial `value` in\r\n\t * \"national\" format rather than \"international\".\r\n\t *\r\n\t * For example, if `initialValueFormat` is `\"national\"`\r\n\t * and the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\r\n\t *\r\n\t * By default, `initialValueFormat` is `undefined`,\r\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\r\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\r\n\t *\r\n\t * The reason for such default behaviour is that\r\n\t * the newer generation grows up when there are no stationary phones\r\n\t * and therefore everyone inputs phone numbers in international format\r\n\t * in their smartphones so people gradually get more accustomed to\r\n\t * writing phone numbers in international format rather than in local format.\r\n\t * Future people won't be using \"national\" format, only \"international\".\r\n\t */\r\n\t// (is `undefined` by default)\r\n\tinitialValueFormat: PropTypes.oneOf(['national']),\r\n\r\n\t// `displayInitialValueAsLocalNumber` property has been\r\n\t// superceded by `initialValueFormat` property.\r\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\r\n\r\n\t/**\r\n\t * The country to be selected by default.\r\n\t * For example, can be set after a GeoIP lookup.\r\n\t *\r\n\t * Example: `\"US\"`.\r\n\t */\r\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\r\n\tdefaultCountry: PropTypes.string,\r\n\r\n\t/**\r\n\t * If specified, only these countries will be available for selection.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"RU\", \"UA\", \"KZ\"]`\r\n\t */\r\n\tcountries: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * Custom country `<select/>` option names.\r\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\r\n\t *\r\n\t * See the `locales` directory for examples.\r\n\t */\r\n\tlabels: labelsPropType,\r\n\r\n\t/**\r\n\t * Country `<select/>` options are sorted by their labels.\r\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\r\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\r\n\t * Some languages, like Chinese, support multiple sorting variants\r\n\t * (called \"collations\"), and the user might prefer one or another.\r\n\t * Also, sometimes the Operating System language is not always\r\n\t * the preferred language for a person using a website or an application,\r\n\t * so there should be a way to specify custom locale.\r\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\r\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\r\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\r\n\t */\r\n\tlocales: PropTypes.oneOfType([\r\n\t\tPropTypes.string,\r\n\t\tPropTypes.arrayOf(PropTypes.string)\r\n\t]),\r\n\r\n\t/*\r\n\t * Custom country `<select/>` options sorting function.\r\n\t * The default one uses `a.localeCompare(b)`, and,\r\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\r\n\t * There have been requests to add custom sorter for cases\r\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\r\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\r\n\tcompareStrings: PropTypes.func,\r\n\t */\r\n\r\n\t/**\r\n\t * A URL template of a country flag, where\r\n\t * \"{XX}\" is a two-letter country code in upper case,\r\n\t * or where \"{xx}\" is a two-letter country code in lower case.\r\n\t * By default it points to `country-flag-icons` gitlab pages website.\r\n\t * I imagine someone might want to download those country flag icons\r\n\t * and host them on their own servers instead\r\n\t * (all flags are available in the `country-flag-icons` library).\r\n\t * There's a catch though: new countries may be added in future,\r\n\t * so when hosting country flag icons on your own server\r\n\t * one should check the `CHANGELOG.md` every time before updating this library,\r\n\t * otherwise there's a possibility that some new country flag would be missing.\r\n\t */\r\n\tflagUrl: PropTypes.string,\r\n\r\n\t/**\r\n\t * Custom country flag icon components.\r\n\t * These flags will be used instead of the default ones.\r\n\t * The the \"Flags\" section of the readme for more info.\r\n\t *\r\n\t * The shape is an object where keys are country codes\r\n\t * and values are flag icon components.\r\n\t * Flag icon components receive the same properties\r\n\t * as `flagComponent` (see below).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `import flags from 'country-flag-icons/react/3x2'`\r\n\t *\r\n\t * `import PhoneInput from 'react-phone-number-input'`\r\n\t *\r\n\t * `<PhoneInput flags={flags} .../>`\r\n\t */\r\n\tflags: PropTypes.objectOf(PropTypes.elementType),\r\n\r\n\t/**\r\n\t * Country flag icon component.\r\n\t *\r\n\t * Takes properties:\r\n\t *\r\n\t * * `country: string` — The country code.\r\n\t * * `countryName: string` — The country name.\r\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\r\n\t * * `flags: object` — The `flags` property (see above).\r\n\t */\r\n\tflagComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\r\n\t */\r\n\taddInternationalOption: PropTypes.bool,\r\n\r\n\t/**\r\n\t * \"International\" icon component.\r\n\t * Should have the same aspect ratio.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `title: string` — \"International\" country option label.\r\n\t */\r\n\tinternationalIcon: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\r\n\t *\r\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\r\n\t * * `\"🌐\"` — inserts \"International\" option.\r\n\t * * `\"|\"` — inserts a separator.\r\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\r\n\t *\r\n\t * Example:\r\n\t *\r\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\r\n\t */\r\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS style object.\r\n\t */\r\n\tstyle: PropTypes.object,\r\n\r\n\t/**\r\n\t * `<Phone/>` component CSS class.\r\n\t */\r\n\tclassName: PropTypes.string,\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `name: string?` — HTML `name` attribute.\r\n\t * * `value: string?` — The currently selected country code.\r\n\t * * `onChange(value: string?)` — Updates the `value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\r\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\r\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\r\n\t * * `readOnly: boolean?` — HTML `readOnly` attribute.\r\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\r\n\t * * `className: string` — CSS class name.\r\n\t */\r\n\tcountrySelectComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Country `<select/>` component props.\r\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\r\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\r\n\t */\r\n\tcountrySelectProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `value: string` — The formatted `value`.\r\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\r\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\r\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\r\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\r\n\t *\r\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\r\n\t */\r\n\tinputComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component props.\r\n\t */\r\n\tnumberInputProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t *\r\n\t * Receives properties:\r\n\t *\r\n\t * * `style: object` — A component CSS style object.\r\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\r\n\t */\r\n\tcontainerComponent: PropTypes.elementType,\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component props.\r\n\t */\r\n\tcontainerComponentProps: PropTypes.object,\r\n\r\n\t/**\r\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\r\n\t * the caret position is moved right before the next available digit skipping\r\n\t * any punctuation in between. This is called \"smart\" caret positioning.\r\n\t * Another case would be the phone number format changing as a result of\r\n\t * the user inserting the digit somewhere in the middle, which would require\r\n\t * re-positioning the caret because all digit positions have changed.\r\n\t * This \"smart\" caret positioning feature can be turned off by passing\r\n\t * `smartCaret={false}` property: use it in case of any possible issues\r\n\t * with caret position during phone number input.\r\n\t */\r\n\t// Is `true` by default.\r\n\tsmartCaret: PropTypes.bool,\r\n\r\n\t/**\r\n\t * Set to `true` to force \"international\" phone number format.\r\n\t * Set to `false` to force \"national\" phone number format.\r\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\r\n\t */\r\n\tinternational: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `true`, the phone number input will get trimmed\r\n\t * if it exceeds the maximum length for the country.\r\n\t */\r\n\tlimitMaxLength: PropTypes.bool,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: PropTypes.bool,\r\n\r\n\t/**\r\n\t * `libphonenumber-js` metadata.\r\n\t *\r\n\t * Can be used to pass custom `libphonenumber-js` metadata\r\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\r\n\t */\r\n\tmetadata: metadataPropType,\r\n\r\n\t/**\r\n\t * Is called every time the selected country changes:\r\n\t * either programmatically or when user selects it manually from the list.\r\n\t */\r\n\t// People have been asking for a way to get the selected country.\r\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\r\n\t// For some it's just a \"business requirement\".\r\n\t// I guess it's about gathering as much info on the user as a website can\r\n\t// without introducing any addional fields that would complicate the form\r\n\t// therefore reducing \"conversion\" (that's a marketing term).\r\n\t// Assuming that the phone number's country is the user's country\r\n\t// is not 100% correct but in most cases I guess it's valid.\r\n\tonCountryChange: PropTypes.func,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: PropTypes.bool\r\n}\r\n\r\nconst defaultProps = {\r\n\t/**\r\n\t * Remember (and autofill) the value as a phone number.\r\n\t */\r\n\tautoComplete: 'tel',\r\n\r\n\t/**\r\n\t * Country `<select/>` component.\r\n\t */\r\n\tcountrySelectComponent: CountrySelect,\r\n\r\n\t/**\r\n\t * Flag icon component.\r\n\t */\r\n\tflagComponent: Flag,\r\n\r\n\t/**\r\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\r\n\t */\r\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\r\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\r\n\r\n\t/**\r\n\t * Default \"International\" country `<select/>` option icon.\r\n\t */\r\n\tinternationalIcon: InternationalIcon,\r\n\r\n\t/**\r\n\t * Phone number `<input/>` component.\r\n\t */\r\n\tinputComponent: 'input',\r\n\r\n\t/**\r\n\t * Wrapping `<div/>` component.\r\n\t */\r\n\tcontainerComponent: 'div',\r\n\r\n\t/**\r\n\t * Some users requested a way to reset the component:\r\n\t * both number `<input/>` and country `<select/>`.\r\n\t * Whenever `reset` property changes both number `<input/>`\r\n\t * and country `<select/>` are reset.\r\n\t * It's not implemented as some instance `.reset()` method\r\n\t * because `ref` is forwarded to `<input/>`.\r\n\t * It's also not replaced with just resetting `country` on\r\n\t * external `value` reset, because a user could select a country\r\n\t * and then not input any `value`, and so the selected country\r\n\t * would be \"stuck\", if not using this `reset` property.\r\n\t */\r\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\r\n\treset: PropTypes.any,\r\n\r\n\t/**\r\n\t *\r\n\t */\r\n\r\n\t/**\r\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\r\n\t */\r\n\tsmartCaret: true,\r\n\r\n\t/**\r\n\t * Whether to add the \"International\" option\r\n\t * to the list of countries.\r\n\t */\r\n\taddInternationalOption: true,\r\n\r\n\t/**\r\n\t * If set to `false`, and `international` is `true`, then\r\n\t * users won't be able to erase the \"country calling part\"\r\n\t * of a phone number in the `<input/>`.\r\n\t */\r\n\tcountryCallingCodeEditable: true,\r\n\r\n\t/**\r\n\t * If set to `false`, will not focus the `<input/>` component\r\n\t * when the user selects a country from the list of countries.\r\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\r\n\t * Quote:\r\n\t * \"On input: Changing the setting of any user interface component\r\n\t *  does not automatically cause a change of context unless the user\r\n\t *  has been advised of the behaviour before using the component.\"\r\n\t */\r\n\tfocusInputOnCountrySelection: true\r\n}\r\n\r\nfunction withDefaultProps(props) {\r\n\tprops = { ...props }\r\n\r\n\tfor (const key in defaultProps) {\r\n\t\tif (props[key] === undefined) {\r\n\t\t\tprops[key] = defaultProps[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn props\r\n}\r\n\r\nexport default PhoneNumberInput\r\n\r\nfunction areEqualArrays(a, b) {\r\n\tif (a.length !== b.length) {\r\n\t\treturn false\r\n\t}\r\n\tlet i = 0\r\n\twhile (i < a.length) {\r\n\t\tif (a[i] !== b[i]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t\ti++\r\n\t}\r\n\treturn true\r\n}\r\n"],"mappings":"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CtF,MAAM,EAAE7E,SAAS,CAACmK,IA/BU;EAiC5B;AACD;AACA;AACA;EACC5C,QAAQ,EAAEvH,SAAS,CAACqK,IArCQ;EAuC5B;AACD;AACA;AACA;EACC7C,QAAQ,EAAExH,SAAS,CAACqK,IA3CQ;EA6C5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA5C,YAAY,EAAEzH,SAAS,CAACkK,MAlEI;EAoE5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA5E,kBAAkB,EAAEtF,SAAS,CAACsK,KAAV,CAAgB,CAAC,UAAD,CAAhB,CAxFQ;EA0F5B;EACA;EACAjF,gCAAgC,EAAErF,SAAS,CAACqK,IA5FhB;EA8F5B;AACD;AACA;AACA;AACA;AACA;EACC;EACAzG,cAAc,EAAE5D,SAAS,CAACkK,MArGE;EAuG5B;AACD;AACA;AACA;AACA;AACA;AACA;EACCjG,SAAS,EAAEjE,SAAS,CAACuK,OAAV,CAAkBvK,SAAS,CAACkK,MAA5B,CA9GiB;EAgH5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCjJ,MAAM,EAAEC,cA1HoB;EA4H5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCuF,OAAO,EAAEzG,SAAS,CAACwK,SAAV,CAAoB,CAC5BxK,SAAS,CAACkK,MADkB,EAE5BlK,SAAS,CAACuK,OAAV,CAAkBvK,SAAS,CAACkK,MAA5B,CAF4B,CAApB,CAzImB;EA8I5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;EAEC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC3B,OAAO,EAAEvI,SAAS,CAACkK,MArKS;EAuK5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC7B,KAAK,EAAErI,SAAS,CAACyK,QAAV,CAAmBzK,SAAS,CAAC0K,WAA7B,CA7LqB;EA+L5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCpC,aAAa,EAAEtI,SAAS,CAAC0K,WAzMG;EA2M5B;AACD;AACA;EACC7G,sBAAsB,EAAE7D,SAAS,CAACqK,IA9MN;EAgN5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACC7B,iBAAiB,EAAExI,SAAS,CAAC0K,WAxND;EA0N5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClE,mBAAmB,EAAExG,SAAS,CAACuK,OAAV,CAAkBvK,SAAS,CAACkK,MAA5B,CAtOO;EAwO5B;AACD;AACA;EACCxC,KAAK,EAAE1H,SAAS,CAAC2K,MA3OW;EA6O5B;AACD;AACA;EACChD,SAAS,EAAE3H,SAAS,CAACkK,MAhPO;EAkP5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACClC,sBAAsB,EAAEhI,SAAS,CAAC0K,WAnQN;EAqQ5B;AACD;AACA;AACA;AACA;EACC3F,kBAAkB,EAAE/E,SAAS,CAAC2K,MA1QF;EA4Q5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC/C,cAAc,EAAE5H,SAAS,CAAC0K,WAzRE;EA2R5B;AACD;AACA;EACC7C,gBAAgB,EAAE7H,SAAS,CAAC2K,MA9RA;EAgS5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCzC,kBAAkB,EAAElI,SAAS,CAAC0K,WAxSF;EA0S5B;AACD;AACA;EACCvC,uBAAuB,EAAEnI,SAAS,CAAC2K,MA7SP;EA+S5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACA7C,UAAU,EAAE9H,SAAS,CAACqK,IA3TM;EA6T5B;AACD;AACA;AACA;AACA;EACC3H,aAAa,EAAE1C,SAAS,CAACqK,IAlUG;EAoU5B;AACD;AACA;AACA;EACCvG,cAAc,EAAE9D,SAAS,CAACqK,IAxUE;EA0U5B;AACD;AACA;AACA;AACA;EACCtG,0BAA0B,EAAE/D,SAAS,CAACqK,IA/UV;EAiV5B;AACD;AACA;AACA;AACA;AACA;EACCtJ,QAAQ,EAAEC,gBAvVkB;EAyV5B;AACD;AACA;AACA;EACC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAiF,eAAe,EAAEjG,SAAS,CAACmK,IArWC;EAuW5B;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCvH,4BAA4B,EAAE5C,SAAS,CAACqK;AAhXZ,CAA7B;AAmXA,IAAMO,YAAY,GAAG;EACpB;AACD;AACA;EACCnD,YAAY,EAAE,KAJM;EAMpB;AACD;AACA;EACCO,sBAAsB,EAAE3H,aATJ;EAWpB;AACD;AACA;EACCiI,aAAa,EAAEhI,IAdK;EAgBpB;AACD;AACA;EACC;EACAiI,OAAO,EAAE,sEApBW;EAsBpB;AACD;AACA;EACCC,iBAAiB,EAAEjI,iBAzBC;EA2BpB;AACD;AACA;EACCqH,cAAc,EAAE,OA9BI;EAgCpB;AACD;AACA;EACCM,kBAAkB,EAAE,KAnCA;EAqCpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACC;EACAO,KAAK,EAAEzI,SAAS,CAAC6K,GAlDG;EAoDpB;AACD;AACA;;EAEC;AACD;AACA;EACC/C,UAAU,EAAE,IA3DQ;EA6DpB;AACD;AACA;AACA;EACCjE,sBAAsB,EAAE,IAjEJ;EAmEpB;AACD;AACA;AACA;AACA;EACCE,0BAA0B,EAAE,IAxER;EA0EpB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACCnB,4BAA4B,EAAE;AAnFV,CAArB;AAsFA,SAASoH,gBAATA,CAA0BlI,KAA1B,EAAiC;EAChCA,KAAK,GAAA8H,aAAA,KAAQ9H,KAAR,CAAL;EAEA,KAAK,IAAMgJ,GAAX,IAAkBF,YAAlB,EAAgC;IAC/B,IAAI9I,KAAK,CAACgJ,GAAD,CAAL,KAAenF,SAAnB,EAA8B;MAC7B7D,KAAK,CAACgJ,GAAD,CAAL,GAAaF,YAAY,CAACE,GAAD,CAAzB;IACA;EACD;EAED,OAAOhJ,KAAP;AACA;AAED,eAAegI,gBAAf;AAEA,SAAS9C,cAATA,CAAwB+D,CAAxB,EAA2BC,CAA3B,EAA8B;EAC7B,IAAID,CAAC,CAACE,MAAF,KAAaD,CAAC,CAACC,MAAnB,EAA2B;IAC1B,OAAO,KAAP;EACA;EACD,IAAIC,CAAC,GAAG,CAAR;EACA,OAAOA,CAAC,GAAGH,CAAC,CAACE,MAAb,EAAqB;IACpB,IAAIF,CAAC,CAACG,CAAD,CAAD,KAASF,CAAC,CAACE,CAAD,CAAd,EAAmB;MAClB,OAAO,KAAP;IACA;IACDA,CAAC;EACD;EACD,OAAO,IAAP;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}