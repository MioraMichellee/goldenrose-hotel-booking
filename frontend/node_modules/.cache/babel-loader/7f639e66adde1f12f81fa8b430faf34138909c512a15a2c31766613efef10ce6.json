{"ast":null,"code":"import { useCallback } from 'react'; // Returns a custom `onKeyDown` handler that works around a Backspace keypress edge case:\n// * `<PhoneInputWithCountrySelect international countryCallingCodeEditable={false}/>`\n// * When placing the caret before the leading plus character and pressing Backspace,\n//   it duplicates the country calling code in the `<input/>`.\n// https://github.com/catamphetamine/react-phone-number-input/issues/442\n\nexport default function useInputKeyDownHandler(_ref) {\n  var onKeyDown = _ref.onKeyDown,\n    international = _ref.international;\n  return useCallback(function (event) {\n    if (event.keyCode === BACKSPACE_KEY_CODE && international) {\n      // It checks `event.target` here for being an `<input/>` element\n      // because \"keydown\" events may bubble from arbitrary child elements\n      // so there's no guarantee that `event.target` represents an `<input/>` element.\n      // Also, since `inputComponent` is not neceesarily an `<input/>`, this check is required too.\n      if (event.target instanceof HTMLInputElement) {\n        if (getCaretPosition(event.target) === AFTER_LEADING_PLUS_CARET_POSITION) {\n          event.preventDefault();\n          return;\n        }\n      }\n    }\n    if (onKeyDown) {\n      onKeyDown(event);\n    }\n  }, [onKeyDown, international]);\n}\nvar BACKSPACE_KEY_CODE = 8; // Gets the caret position in an `<input/>` field.\n// The caret position starts with `0` which means \"before the first character\".\n\nfunction getCaretPosition(element) {\n  return element.selectionStart;\n}\nvar AFTER_LEADING_PLUS_CARET_POSITION = '+'.length;","map":{"version":3,"names":["useCallback","useInputKeyDownHandler","_ref","onKeyDown","international","event","keyCode","BACKSPACE_KEY_CODE","target","HTMLInputElement","getCaretPosition","AFTER_LEADING_PLUS_CARET_POSITION","preventDefault","element","selectionStart","length"],"sources":["/mnt/Disque_local1/Projet IHM/frontend/node_modules/react-phone-number-input/source/useInputKeyDownHandler.js"],"sourcesContent":["import { useCallback } from 'react'\r\n\r\n// Returns a custom `onKeyDown` handler that works around a Backspace keypress edge case:\r\n// * `<PhoneInputWithCountrySelect international countryCallingCodeEditable={false}/>`\r\n// * When placing the caret before the leading plus character and pressing Backspace,\r\n//   it duplicates the country calling code in the `<input/>`.\r\n// https://github.com/catamphetamine/react-phone-number-input/issues/442\r\nexport default function useInputKeyDownHandler({\r\n\tonKeyDown,\r\n\tinternational\r\n}) {\r\n\treturn useCallback((event) => {\r\n\t\tif (event.keyCode === BACKSPACE_KEY_CODE && international) {\r\n\t\t\t// It checks `event.target` here for being an `<input/>` element\r\n\t\t\t// because \"keydown\" events may bubble from arbitrary child elements\r\n\t\t\t// so there's no guarantee that `event.target` represents an `<input/>` element.\r\n\t\t\t// Also, since `inputComponent` is not neceesarily an `<input/>`, this check is required too.\r\n\t\t\tif (event.target instanceof HTMLInputElement) {\r\n\t\t\t\tif (getCaretPosition(event.target) === AFTER_LEADING_PLUS_CARET_POSITION) {\r\n\t\t\t\t\tevent.preventDefault()\r\n\t\t\t\t\treturn\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (onKeyDown) {\r\n\t\t\tonKeyDown(event)\r\n\t\t}\r\n\t}, [\r\n\t\tonKeyDown,\r\n\t\tinternational\r\n\t])\r\n}\r\n\r\nconst BACKSPACE_KEY_CODE = 8\r\n\r\n// Gets the caret position in an `<input/>` field.\r\n// The caret position starts with `0` which means \"before the first character\".\r\nfunction getCaretPosition(element) {\r\n\treturn element.selectionStart\r\n}\r\n\r\nconst AFTER_LEADING_PLUS_CARET_POSITION = '+'.length"],"mappings":"AAAA,SAASA,WAAT,QAA4B,OAA5B,C,CAEA;AACA;AACA;AACA;AACA;;AACA,eAAe,SAASC,sBAATA,CAAAC,IAAA,EAGZ;EAAA,IAFFC,SAEE,GAAAD,IAAA,CAFFC,SAEE;IADFC,aACE,GAAAF,IAAA,CADFE,aACE;EACF,OAAOJ,WAAW,CAAC,UAACK,KAAD,EAAW;IAC7B,IAAIA,KAAK,CAACC,OAAN,KAAkBC,kBAAlB,IAAwCH,aAA5C,EAA2D;MAC1D;MACA;MACA;MACA;MACA,IAAIC,KAAK,CAACG,MAAN,YAAwBC,gBAA5B,EAA8C;QAC7C,IAAIC,gBAAgB,CAACL,KAAK,CAACG,MAAP,CAAhB,KAAmCG,iCAAvC,EAA0E;UACzEN,KAAK,CAACO,cAAN;UACA;QACA;MACD;IACD;IACD,IAAIT,SAAJ,EAAe;MACdA,SAAS,CAACE,KAAD,CAAT;IACA;EACD,CAhBiB,EAgBf,CACFF,SADE,EAEFC,aAFE,CAhBe,CAAlB;AAoBA;AAED,IAAMG,kBAAkB,GAAG,CAA3B,C,CAEA;AACA;;AACA,SAASG,gBAATA,CAA0BG,OAA1B,EAAmC;EAClC,OAAOA,OAAO,CAACC,cAAf;AACA;AAED,IAAMH,iCAAiC,GAAG,IAAII,MAA9C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}